///<reference path="World.ts"/>
///<reference path="Interpreter.ts"/>
///<reference path="Graph.ts"/>

class WorldWrapperNode {
    state : WorldState;
    action : string;

    constructor(state: WorldState, action: string) {
        this.state = state;
        this.action = action;
    }
}

/** 
* Planner module
*
* The goal of the Planner module is to take the interpetation(s)
* produced by the Interpreter module and to plan a sequence of actions
* for the robot to put the world into a state compatible with the
* user's command, i.e. to achieve what the user wanted.
*
* The planner should use your A* search implementation to find a plan.
*/

class WorldGraph implements Graph<WorldWrapperNode> {

    outgoingEdges(node : WorldWrapperNode): Edge<WorldWrapperNode>[]  {
        var edges = [];
        var state = node.state;
        if(state.holding === null) {
            if(state.stacks[state.arm]){
                edges.push(this.createPickUpActionEdge(node))
            }
        } else {
            edges.push(this.createDropActionEdge(node))
        }

        if(state.arm > 0) {
            edges.push(this.createLeftMoveActionEdge(node))
        }

        if (state.arm < state.stacks.length - 1) {
            edges.push(this.createRightMoveActionEdge(node))
        }

        return edges;
    }

    compareNodes(s1 : WorldWrapperNode, s2 : WorldWrapperNode) : number {
        if (JSON.stringify(s1) === JSON.stringify(s2)) {
            return 0;
        } else {
            return 1;
        }
    }

    private createPickUpActionEdge(node : WorldWrapperNode) {
        var e = new Edge();
        e.cost = 1;
        e.from = node;
        var nextState = copyWorld(node.state);
        nextState.holding = nextState.stacks[nextState.arm].pop();
        e.to = new WorldWrapperNode(nextState, "p");

        return e;
    }

    private createDropActionEdge(node : WorldWrapperNode) {
        var e = new Edge();
        e.cost = 1;
        e.from = node;
        var nextState = copyWorld(node.state);
        nextState.stacks[nextState.arm].push(nextState.holding);
        nextState.holding = null;
        e.to = new WorldWrapperNode(nextState, "d");
        return e;
    }

    private createLeftMoveActionEdge(node : WorldWrapperNode) {
        var e = new Edge();
        e.cost = 1;
        e.from = node;
        var nextState = copyWorld(node.state);
        nextState.arm--;
        e.to = new WorldWrapperNode(nextState, "l");
        return e;
    }

    private createRightMoveActionEdge(node : WorldWrapperNode) {
        var e = new Edge();
        e.cost = 1;
        e.from = node;
        var nextState = copyWorld(node.state);
        nextState.arm++;
        e.to = new WorldWrapperNode(nextState, "r");
        return e;
    }


    
}

function copyWorld(s : WorldState) : WorldState {
    return JSON.parse(JSON.stringify(s));
}
    
module Planner {

    //////////////////////////////////////////////////////////////////////
    // exported functions, classes and interfaces/types

    /**
     * Top-level driver for the Planner. Calls `planInterpretation` for each given interpretation generated by the Interpreter. 
     * @param interpretations List of possible interpretations.
     * @param currentState The current state of the world.
     * @returns Augments Interpreter.InterpretationResult with a plan represented by a list of strings.
     */
    export function plan(interpretations : Interpreter.InterpretationResult[], currentState : WorldState) : PlannerResult[] {
        var errors : Error[] = [];
        var plans : PlannerResult[] = [];
        interpretations.forEach((interpretation) => {
            try {
                var result : PlannerResult = <PlannerResult>interpretation;
                result.plan = planInterpretation(result.interpretation, currentState);
                if (result.plan.length == 0) {
                    result.plan.push("That is already true!");
                }
                plans.push(result);
            } catch(err) {
                errors.push(err);
            }
        });
        if (plans.length) {
            return plans;
        } else {
            // only throw the first error found
            throw errors[0];
        }
    }

    export interface PlannerResult extends Interpreter.InterpretationResult {
        plan : string[];
    }

    export function stringify(result : PlannerResult) : string {
        return result.plan.join(", ");
    }

    //////////////////////////////////////////////////////////////////////
    // private functions

    /**
     * The core planner function. The code here is just a template;
     * you should rewrite this function entirely. In this template,
     * the code produces a dummy plan which is not connected to the
     * argument `interpretation`, but your version of the function
     * should be such that the resulting plan depends on
     * `interpretation`.
     *
     * 
     * @param interpretation The logical interpretation of the user's desired goal. The plan needs to be such that by executing it, the world is put into a state that satisfies this goal.
     * @param state The current world state.
     * @returns Basically, a plan is a
     * stack of strings, which are either system utterances that
     * explain what the robot is doing (e.g. "Moving left") or actual
     * actions for the robot to perform, encoded as "l", "r", "p", or
     * "d". The code shows how to build a plan. Each step of the plan can
     * be added using the `push` method.
     */
    function planInterpretation(interpretation : Interpreter.DNFFormula, state : WorldState) : string[] {
        var start = new WorldWrapperNode(state, null);
        var graph = new WorldGraph();
        
        var goalFunction = (wwn) => true;
        var heuristicFunction = (wwn) => 1337;
        var result = aStarSearch<WorldWrapperNode>(graph, start, goalFunction, heuristicFunction, 10);

        var actions = result.path.map(wwn => wwn.action);

        return actions;
    }

}
