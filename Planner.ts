///<reference path="World.ts"/>
///<reference path="Interpreter.ts"/>
///<reference path="Graph.ts"/>
///<reference path="WorldGraph.ts"/>

module Planner {

    //////////////////////////////////////////////////////////////////////
    // exported functions, classes and interfaces/types

    import Literal = Interpreter.Literal;
    /**
     * Top-level driver for the Planner. Calls `planInterpretation` for each given interpretation generated by the Interpreter.
     * @param interpretations List of possible interpretations.
     * @param currentState The current state of the world.
     * @returns Augments Interpreter.InterpretationResult with a plan represented by a list of strings.
     */
    export function plan(interpretations:Interpreter.InterpretationResult[], currentState:WorldState):PlannerResult[] {
        var errors:Error[] = [];
        var plans:PlannerResult[] = [];
        interpretations.forEach((interpretation) => {
            try {
                var result:PlannerResult = <PlannerResult>interpretation;
                result.plan = planInterpretation(result.interpretation, currentState);
                if (result.plan.length == 0) {
                    result.plan.push("That is already true!");
                }
                plans.push(result);
            } catch (err) {
                errors.push(err);
            }
        });
        if (plans.length) {
            return plans;
        } else {
            // only throw the first error found
            throw errors[0];
        }
    }

    function goalReached(state:WorldState, interpretation:Interpreter.DNFFormula):boolean {
        for (var i = 0; i < interpretation.length; i++) {
            for (var j = 0; j < interpretation[i].length; j++) {
                var literal = interpretation[i][j];
                var relation = literal.relation;

                if (relation === "holding" && state.holding === literal.args[0]) {
                    return true;
                } else {
                    var fKey = [literal.args[0]];
                    var sKey = [literal.args[1]];

                    //if this goal interpretation is reached, checkBinaryConstraint
                    //will return a nonempty list
                    var isGoal = Interpreter.checkBinaryConstraint(sKey, fKey, relation, state);
                    if (isGoal.length === 1) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    function chooseCheapestLiteral(state:WorldState, interpretation:Interpreter.DNFFormula):number {
        var literal = interpretation[0][0];
        var oldHeuristic:number;
        var heuristicFunc:(s:WorldState, l:Literal) => number;

        if (literal.relation === "holding") {
            heuristicFunc = unaryHeuristic;
        } else {
            heuristicFunc = binaryHeuristic;
        }

        oldHeuristic = heuristicFunc(state, literal);
        for (var i = 0; i < interpretation.length; i++) {
            for (var j = 0; j < interpretation[i].length; j++) {
                var tmp = heuristicFunc(state, interpretation[i][j]);
                if (tmp < oldHeuristic) {
                    oldHeuristic = tmp;
                    literal = interpretation[i][j];
                }
            }
        }

        return oldHeuristic;
    }

    function distanceToKey(key:string, state:WorldState) {
        var stackIndex = Interpreter.findStackIndex(key, state);
        var objectsAboveStart = objectsAboveKey(key, state.stacks[stackIndex]);
        var armIndex = state.arm;
        return Math.abs(armIndex - stackIndex) + objectsAboveStart;
    }

    function unaryHeuristic(state:WorldState, literal:Literal):number {
        var key = literal.args[0];
        if (state.holding === key) {
            return 0;
        }
        return distanceToKey(key, state);
    }

    function binaryHeuristic(state:WorldState, literal:Literal):number {
        var startKey = literal.args[0];
        var goalKey = literal.args[1];
        var distanceToGoal:number = 0;
        var distanceToStart:number = 0;

        if (goalKey === "floor") {
            distanceToGoal = findClosestFloor(state);
        } else if (goalKey === state.holding) {
            distanceToGoal = 1;
        } else {
            distanceToGoal = distanceToKey(goalKey, state);
        }

        if (startKey === state.holding) {
            distanceToStart = 0;
        } else {
            distanceToStart = distanceToKey(startKey, state);
        }

        if (literal.relation === "ontop" || literal.relation === "inside" || literal.relation === "below") {
            return distanceToStart + distanceToGoal;
        } else {
            //TODO other relations
            return 0;
        }
    }

    function objectsAboveKey(key:string, stack:string[]):number {
        return (stack.length - 1) - Interpreter.find(key, stack);
    }

    function findClosestFloor(state:WorldState):number {
        var closestFloor = Infinity;
        var armIndex = state.arm;
        for (var i = 0; i < state.stacks.length; i++) {
            var curr:number = state.stacks[i].length + Math.abs(i - armIndex);
            if (curr < closestFloor) {
                closestFloor = curr;
            }
        }
        return curr;
    }

    export interface PlannerResult extends Interpreter.InterpretationResult {
        plan:string[];
    }

    export function stringify(result:PlannerResult):string {
        return result.plan.join(", ");
    }

    //////////////////////////////////////////////////////////////////////
    // private functions

    /**
     * The core planner function. The code here is just a template;
     * you should rewrite this function entirely. In this template,
     * the code produces a dummy plan which is not connected to the
     * argument `interpretation`, but your version of the function
     * should be such that the resulting plan depends on
     * `interpretation`.
     *
     *
     * @param interpretation The logical interpretation of the user's desired goal. The plan needs to be such that by executing it, the world is put into a state that satisfies this goal.
     * @param state The current world state.
     * @returns Basically, a plan is a
     * stack of strings, which are either system utterances that
     * explain what the robot is doing (e.g. "Moving left") or actual
     * actions for the robot to perform, encoded as "l", "r", "p", or
     * "d". The code shows how to build a plan. Each step of the plan can
     * be added using the `push` method.
     */
    function planInterpretation(interpretation:Interpreter.DNFFormula, state:WorldState):string[] {
        var start = new WorldWrapperNode(state, null);
        var graph = new WorldGraph();
        var goalFunction = (wwn:WorldWrapperNode) => goalReached(wwn.state, interpretation);
        var heuristicFunction = (wwn:WorldWrapperNode) => chooseCheapestLiteral(wwn.state, interpretation);
        var before = Date.now();
        var result = aStarSearch<WorldWrapperNode>(graph, start, goalFunction, heuristicFunction, 120);
        var after = Date.now();

        console.log("Ran in", after - before);

        var actions = result.path.map(wwn => wwn.action);
        actions.shift();
        return actions;
    }

}
