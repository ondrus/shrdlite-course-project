///<reference path="World.ts"/>
///<reference path="Interpreter.ts"/>
///<reference path="Graph.ts"/>
///<reference path="WorldGraph.ts"/>

module Planner {

    //////////////////////////////////////////////////////////////////////
    // exported functions, classes and interfaces/types

    /**
     * Top-level driver for the Planner. Calls `planInterpretation` for each given interpretation generated by the Interpreter.
     * @param interpretations List of possible interpretations.
     * @param currentState The current state of the world.
     * @returns Augments Interpreter.InterpretationResult with a plan represented by a list of strings.
     */
    export function plan(interpretations : Interpreter.InterpretationResult[], currentState : WorldState) : PlannerResult[] {
        var errors : Error[] = [];
        var plans : PlannerResult[] = [];
        interpretations.forEach((interpretation) => {
            try {
                var result : PlannerResult = <PlannerResult>interpretation;
                result.plan = planInterpretation(result.interpretation, currentState);
                if (result.plan.length == 0) {
                    result.plan.push("That is already true!");
                }
                plans.push(result);
            } catch(err) {
                errors.push(err);
            }
        });
        if (plans.length) {
            return plans;
        } else {
            // only throw the first error found
            throw errors[0];
        }
    }

    function goalReached(state : WorldState, interpretation : Interpreter.DNFFormula) : boolean{
      for(var i = 0; i < interpretation.length; i++){
        for(var j = 0; j < interpretation[i].length; j++){
          var literal = interpretation[i][j];
          var relation  = literal.relation;

          if(relation === "holding" && state.holding === literal.args[0]){
            return true;
          } else {
              var fKey = [literal.args[0]];
              var sKey = [literal.args[1]];

              //if this goal interpretation is reached, checkBinaryConstraint
              //will return a nonempty list
              var isGoal = Interpreter.checkBinaryConstraint(sKey, fKey, relation, state);
              if(isGoal.length === 1){
                  return true;
              }
          }
        }
      }
      return false;
    }

    function chooseCheapestLiteral(state : WorldState, interpretation : Interpreter.DNFFormula) : number{
        var literal = interpretation[0][0];
        var oldHeuristic : number = 0;

        if(literal.relation === "holding"){
          oldHeuristic = unaryHeuristic(state, literal.args[0]);
          for(var i = 0; i < interpretation.length; i++){
            for(var j = 0; j < interpretation[i].length; j++){
              var tmp = unaryHeuristic(state, interpretation[i][j].args[0]);
              if(tmp < oldHeuristic){
                oldHeuristic = tmp;
                literal = interpretation[i][j];
              }
            }
          }
        }else{
          oldHeuristic = binaryHeuristic(state, literal.args[0], literal.args[1]);
          for(var i = 0; i < interpretation.length; i++){
            for(var j = 0; j < interpretation[i].length; j++){
              var tmp = binaryHeuristic(state, interpretation[i][j].args[0], interpretation[i][j].args[1]);
              if(tmp < oldHeuristic){
                oldHeuristic = tmp;
                literal = interpretation[i][j];
              }
            }
          }
        }

      return oldHeuristic;
    }

    function unaryHeuristic(state : WorldState, startKey : string) : number{
      var armIndex = state.arm;
        if(state.holding === startKey) {
            return 0;
        }
      var startColumn = Interpreter.findStackIndex(startKey, state);
        var startStack = state.stacks[startColumn];

      var objectsAboveStart = (startStack.length - 1) - Interpreter.find(startKey, startStack);

      return Math.abs(armIndex - startColumn) + objectsAboveStart;
    }

    function binaryHeuristic(state : WorldState, startKey : string, goalKey : string) : number{
      var armIndex = state.arm;

      var goalColumn = 0;
        if(goalKey === "floor") {
            goalColumn = 0;
        } else if (goalKey === state.holding) {
            goalColumn = 0;
        } else {
            goalColumn = Interpreter.findStackIndex(goalKey, state);
        }
        var startColumn : number;
        if(startKey !== state.holding) {
            startColumn = Interpreter.findStackIndex(startKey, state);
        }
      var goalStack = state.stacks[goalColumn];
      var objectsAboveGoal = (goalStack.length - 1) - Interpreter.find(goalKey, goalStack);

      return Math.abs(startColumn - goalColumn) +
        objectsAboveGoal + unaryHeuristic(state, startKey);
    }

    export interface PlannerResult extends Interpreter.InterpretationResult {
        plan : string[];
    }

    export function stringify(result : PlannerResult) : string {
        return result.plan.join(", ");
    }

    //////////////////////////////////////////////////////////////////////
    // private functions

    /**
     * The core planner function. The code here is just a template;
     * you should rewrite this function entirely. In this template,
     * the code produces a dummy plan which is not connected to the
     * argument `interpretation`, but your version of the function
     * should be such that the resulting plan depends on
     * `interpretation`.
     *
     *
     * @param interpretation The logical interpretation of the user's desired goal. The plan needs to be such that by executing it, the world is put into a state that satisfies this goal.
     * @param state The current world state.
     * @returns Basically, a plan is a
     * stack of strings, which are either system utterances that
     * explain what the robot is doing (e.g. "Moving left") or actual
     * actions for the robot to perform, encoded as "l", "r", "p", or
     * "d". The code shows how to build a plan. Each step of the plan can
     * be added using the `push` method.
     */
    function planInterpretation(interpretation : Interpreter.DNFFormula, state : WorldState) : string[] {
        var start = new WorldWrapperNode(state, null);
        var graph = new WorldGraph();
        var goalFunction = (wwn:WorldWrapperNode) => goalReached(wwn.state, interpretation);
        var heuristicFunction = (wwn:WorldWrapperNode) =>  0; //chooseCheapestLiteral(wwn.state, interpretation);
        var result = aStarSearch<WorldWrapperNode>(graph, start, goalFunction, heuristicFunction, 120);
        var actions = result.path.map(wwn => wwn.action);
        actions.shift();
        return actions;
    }

}
